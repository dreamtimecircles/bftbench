searchState.loadedDescShard("histogram", 0, "This crate provides histogram implementations that are …\nA histogram that uses atomic 64bit counters for each …\nA bucket represents a quantized range of values and a …\nThe configuration of a histogram which determines the …\nErrors returned for histogram construction and operations.\nA histogram that uses plain 64bit counters for each bucket.\nThis histogram is a sparse, columnar representation of the …\nIncrement the bucket that contains the value by some count.\nAdd some count to the counter for the bucket corresponding …\nGet a mutable reference to the raw counters.\nGet a reference to the raw counters.\nAdds the other histogram to this histogram and returns the …\nSubtracts the other histogram to this histogram and …\nSubtracts the other histogram from this histogram and …\nReturns the bucket configuration of the histogram.\nparameters representing the resolution and the range of …\nReturns the number of observations within the bucket’s …\nhistogram bucket counts corresponding to the indices\nReturns a new histogram with a reduced grouping power. The …\nReturns a new histogram with a reduced grouping power. The …\nDrains the bucket values into a new Histogram\nReturns the inclusive upper bound for the bucket.\nReturns the relative error (in percentage) of this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new histogram using a provided <code>crate::Config</code> and …\nReturns the grouping power that was used to create this …\nIncrement the bucket that contains the value by one.\nIncrement the counter for the bucket corresponding to the …\nindices for the non-zero buckets in the histogram\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an interator across the histogram.\nRead the bucket values into a new <code>Histogram</code>\nReturns the max value power that was used to create this …\nConstruct a new atomic histogram from the provided …\nCreate a new histogram <code>Config</code> from the parameters. See the …\nConstruct a new histogram from the provided parameters. …\nConstruct a new histogram from the provided parameters. …\nReturn a single percentile from this histogram.\nReturn a single percentile from this histogram.\nReturn a collection of percentiles from this histogram.\nReturn a collection of percentiles from this histogram.\nReturns the range for the bucket.\nReturns the inclusive lower bound for the bucket.\nReturn the total number of buckets needed for this config.\nCreates a new atomic histogram using a provided …\nCreates a new histogram using a provided <code>crate::Config</code>.\nCreates a new histogram using a provided <code>crate::Config</code>.\nAdds the other histogram to this histogram and returns the …\nAdds the other histogram to this histogram and returns the …\nSubtracts the other histogram from this histogram and …")